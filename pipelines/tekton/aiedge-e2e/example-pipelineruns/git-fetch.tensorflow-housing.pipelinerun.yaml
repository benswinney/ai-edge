apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  labels:
    tekton.dev/pipeline: git-fetch
    model-name: tensorflow-housing
  generateName: git-fetch-tensorflow-housing-
spec:
  params:
  - name: model-name
    value: tensorflow-housing
  - name: model-version
    value: "1"
  - name: git-containerfile-repo
    value: https://github.com/opendatahub-io/ai-edge.git
  - name: git-containerfile-revision
    value: "main"
  - name: containerfile-relative-path
    value: pipelines/containerfiles/Containerfile.openvino.mlserver.mlflow
  - name: git-model-repo
    value: https://github.com/opendatahub-io/ai-edge.git
  - name: modelRelativePath
    value: pipelines/models
  - name: model-dir
    value: "tf2model"
  - name: git-model-revision
    value: "main"
  - name: test-endpoint
    value: "v1/models/tensorflow-housing/versions/1:predict"
  - name: candidate-image-tag-reference
    value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.model-name):$(params.model-version)-candidate
  - name: target-image-tag-references
    value:
    - quay.io/rhoai-edge/$(params.model-name):$(params.model-version)-$(context.pipelineRun.uid)
    - quay.io/rhoai-edge/$(params.model-name):$(params.model-version)
    - quay.io/rhoai-edge/$(params.model-name):latest
  - name: upon-end
    value: "delete"
  pipelineRef:
    name: git-fetch
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
  - name: build-workspace-pv
    # Have the tekton controller allocate a PVC for each pipeline run that persists for the life of each PipelineRun object.
    # NOTE: This PVC will be deleted by the Tekton controller when the PipelineRun is deleted
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  - configMap:
      name: tensorflow-housing-test-data
    name: test-data
